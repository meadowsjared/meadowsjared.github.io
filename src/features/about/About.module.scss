$delightful-green: #1df38c;

.greeting {
  font-size: 2rem;
  padding-bottom: 1rem;
}

.description {
  display: flex;
  flex-direction: column;
  font-size: 1.3rem;
  gap: 1rem;
}

.description > p a {
  color: var(--color-primary-400);
  text-decoration: underline;
}

.twist {
  color: var(--color-accent-100);
  animation: twist-text 4s infinite ease-in-out alternate;
  transform-origin: center;
  display: inline-block;
}

.nowrap {
  text-wrap: nowrap;
}

@keyframes twist-text {
  0%,
  50% {
    transform: rotate(0deg);
    color: var(--color-accent-100);
  }
  75%,
  100% {
    transform: rotate(360deg);
    color: $delightful-green;
  }
}

.delightfulText {
  > .nowrap > span {
    display: inline-block;
    animation: wave 1s infinite alternate;
    animation-delay: calc(var(--i) * 0.1s);
    color: $delightful-green;
  }

  // Initialize a variable to keep count of spans
  $spanCount: 0; // Get the number of child elements of the string

  @for $i from 1 through str-length("delight ") {
    > .nowrap:first-child > span:nth-child(#{$i}) {
      // assign a CSS variable to each span to use for the delay
      --i: #{$spanCount};
      $spanCount: $spanCount + 1;
    }
  }
  @for $i from 1 through str-length("visually") {
    > .nowrap:last-child > span:nth-child(#{$i}) {
      // assign a CSS variable to each span to use for the delay
      --i: #{$spanCount};
      $spanCount: $spanCount + 1;
    }
  }
}

@keyframes wave {
  0%,
  60%,
  100% {
    transform: translateY(0px);
  }

  30% {
    transform: translateY(-10px);
  }
}

@media (prefers-reduced-motion) {
  .delightfulText > .nowrap > span {
    animation: none;
  }

  .twist {
    animation: none;
  }
}
